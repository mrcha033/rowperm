name: Build Wheels

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install cibuildwheel
      run: python -m pip install cibuildwheel==2.16.2
    
    - name: Build wheels
      env:
        CIBW_BUILD: cp39-manylinux_x86_64 cp310-manylinux_x86_64 cp311-manylinux_x86_64
        CIBW_SKIP: "*-musllinux_*"
        CIBW_MANYLINUX_X86_64_IMAGE: pytorch/manylinux-builder:cuda12.1
        CIBW_ENVIRONMENT: >
          TORCH_CUDA_ARCH_LIST="8.0;8.6;8.9;9.0+PTX"
          FORCE_CUDA=1
        CIBW_BEFORE_BUILD: >
          pip install torch --index-url https://download.pytorch.org/whl/cu121 &&
          pip install ninja
        CIBW_REPAIR_WHEEL_COMMAND: >
          auditwheel repair -w {dest_dir} {wheel}
        CIBW_TEST_REQUIRES: pytest
        CIBW_TEST_COMMAND: >
          cd {project} &&
          pytest tests/test_correctness.py::TestCorrectness::test_error_handling -v
      run: |
        python -m cibuildwheel --output-dir wheelhouse
    
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-linux-cuda
        path: ./wheelhouse/*.whl
        
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
    
    - name: Build sdist
      run: python -m build --sdist
    
    - name: Upload sdist
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  publish:
    name: Publish to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: wheels-linux-cuda
        path: dist
    
    - uses: actions/download-artifact@v4
      with:
        name: sdist
        path: dist
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: true 