name: Build Wheels

on:
  push:
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CIBW_ARCHS_LINUX: "x86_64"
  CIBW_BUILD: "cp39-* cp310-* cp311-*"
  CIBW_SKIP: "*-musllinux_*"
  CIBW_BUILD_VERBOSITY: "1"
  CIBW_MANYLINUX_X86_64_IMAGE: "nvidia/cuda:12.1.1-devel-centos7"

jobs:
# ────────────────────────────────────────────────────────────
  build_wheels:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: 🔧 Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: 📦 Install cibuildwheel
      run: python -m pip install --upgrade pip cibuildwheel==2.16.2

    - name: 🚀 Build wheels
      env:
        # CUDA 런타임은 컨테이너에 이미 포함
        CIBW_ENVIRONMENT: >
          TORCH_CUDA_ARCH_LIST="8.0;8.6;8.9;9.0+PTX"
          FORCE_CUDA=1
        # 빌드 때 필요한 패키지
        CIBW_BEFORE_BUILD: |
          pip install wheel setuptools ninja &&
          pip install torch==2.3.0 --extra-index-url https://download.pytorch.org/whl/cu121
        # CUDA so 화이트리스트 제외
        CIBW_REPAIR_WHEEL_COMMAND: >
          auditwheel repair -w {dest_dir} --exclude libcuda.so.* --exclude libnvidia-*.so.* {wheel}
        # GPU 없는 환경에서 테스트 건너뛰기
        CIBW_TEST_REQUIRES: "pytest numpy"
        CIBW_TEST_COMMAND: >
          pytest {project}/tests -m "not gpu"
      run: python -m cibuildwheel --output-dir wheelhouse

    - uses: actions/upload-artifact@v4
      with:
        name: wheels-linux-cuda
        path: wheelhouse/*.whl

# ────────────────────────────────────────────────────────────
  build_sdist:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with: {python-version: "3.10"}
    - run: |
        python -m pip install --upgrade pip build
        python -m build --sdist
    - uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

# ────────────────────────────────────────────────────────────
  publish:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/download-artifact@v4
      with: {name: wheels-linux-cuda, path: dist}
    - uses: actions/download-artifact@v4
      with: {name: sdist, path: dist}
    - name: 📤 Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: true
