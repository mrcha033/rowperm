name: Build Wheels

on:
  push:
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels for ${{ matrix.pyver }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pyver: ["cp39-manylinux_x86_64", "cp310-manylinux_x86_64", "cp311-manylinux_x86_64"]

    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: 📦 Install cibuildwheel
        run: python -m pip install --upgrade pip cibuildwheel==2.16.2

      - name: 🚀 Build wheels
        env:
          CIBW_BUILD: ${{ matrix.pyver }}
          CIBW_SKIP: "*-musllinux_*"
          CIBW_MANYLINUX_X86_64_IMAGE: "pytorch/manylinux-builder:cuda12.1"
          CIBW_BUILD_VERBOSITY: "1"
          CIBW_ENVIRONMENT: |
            TORCH_CUDA_ARCH_LIST="8.0;8.6;8.9;9.0+PTX"
            FORCE_CUDA=1
          CIBW_BEFORE_BUILD: |
            pip install --no-cache-dir -U pip wheel setuptools ninja &&
            pip install --no-cache-dir torch==2.3.0 --extra-index-url https://download.pytorch.org/whl/cu121
          CIBW_REPAIR_WHEEL_COMMAND: >
            auditwheel repair -w {dest_dir} --exclude "libcuda.so.*,libnvidia-*.so.*" {wheel}
          CIBW_TEST_REQUIRES: "pytest numpy"
          CIBW_TEST_COMMAND: >
            pytest {project}/tests -m "not gpu"
        run: python -m cibuildwheel --output-dir wheelhouse

      - name: 🧹 Clean up
        if: always()
        run: |
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/share/dotnet
          docker image prune -af
          df -h

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.pyver }}
          path: wheelhouse/*.whl
          
  build_sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with: {python-version: "3.10"}
      - run: |
          python -m pip install --upgrade pip build
          python -m build --sdist
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  publish:
    name: Publish wheels
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-linux-*
          path: dist
          merge-multiple: true

      - name: Download sdist artifact
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist
      
      - name: 📤 Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true
